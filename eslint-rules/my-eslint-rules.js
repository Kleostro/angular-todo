// @ts-check

/** @type {import('eslint').Linter.RulesRecord} */
export const myEslintRules = {
  '@typescript-eslint/consistent-type-assertions': ['error', { assertionStyle: 'never' }],
  '@typescript-eslint/explicit-function-return-type': 'error',
  '@typescript-eslint/no-extraneous-class': 'off',
  '@typescript-eslint/explicit-member-accessibility': [
    'error',
    {
      accessibility: 'explicit',
      overrides: {
        constructors: 'off',
      },
    },
  ],
  '@typescript-eslint/explicit-module-boundary-types': 'error',
  '@typescript-eslint/method-signature-style': 'error',
  '@typescript-eslint/no-explicit-any': 'error',
  '@typescript-eslint/no-floating-promises': 'off',
  '@typescript-eslint/no-inferrable-types': 'error',
  '@typescript-eslint/no-unnecessary-type-parameters': 'off',
  '@typescript-eslint/no-unused-vars': [
    'error',
    {
      args: 'all',
      argsIgnorePattern: '^_',
      caughtErrors: 'all',
      caughtErrorsIgnorePattern: '^_',
      destructuredArrayIgnorePattern: '^_',
      vars: 'all',
      varsIgnorePattern: '^_',
      ignoreRestSiblings: true,
    },
  ],
  '@typescript-eslint/no-use-before-define': 'error',
  '@typescript-eslint/no-useless-empty-export': 'error',
  '@typescript-eslint/require-array-sort-compare': 'error',
  '@typescript-eslint/unbound-method': ['error', { ignoreStatic: true }],
  'class-methods-use-this': 'off',
  curly: ['error', 'all'],
  'dot-notation': 'off',
  'implicit-arrow-linebreak': 'off',
  'function-paren-newline': 'off',
  'operator-linebreak': 'off',
  'import/no-cycle': 'error',
  'import/extensions': [
    'error',
    'ignorePackages',
    {
      js: 'never',
      jsx: 'never',
      ts: 'never',
      tsx: 'never',
    },
  ],
  'import/prefer-default-export': 'off',
  'lines-between-class-members': [
    'error',
    {
      enforce: [
        { blankLine: 'always', next: 'method', prev: '*' },
        { blankLine: 'always', next: '*', prev: 'method' },
      ],
    },
  ],
  'max-len': ['error', { code: 120, ignoreComments: true }],
  'max-lines-per-function': ['error', { max: 40, skipBlankLines: true, skipComments: true }],
  'no-console': ['error', { allow: ['warn', 'error'] }],
  'no-empty-function': 'error',
  'no-relative-import-paths/no-relative-import-paths': [
    'error',
    { allowSameFolder: false, rootDir: 'src', prefix: '@' },
  ],
  'object-curly-newline': 'off',
  'unused-imports/no-unused-imports': 'error',
  '@angular-eslint/no-input-rename': 'off',
  '@typescript-eslint/no-magic-numbers': [
    'error',
    {
      ignore: [0, 1, -1, 2],
      ignoreArrayIndexes: true,
      ignoreClassFieldInitialValues: true,
      ignoreReadonlyClassProperties: true,
      enforceConst: true,
      ignoreDefaultValues: true,
    },
  ],
  '@typescript-eslint/restrict-template-expressions': 'off',
  'perfectionist/sort-imports': 'off',
  'perfectionist/sort-classes': [
    'error',
    {
      groups: [
        'index-signature',
        'static-property',
        'static-block',
        'private-readonly-property',
        'private-property',
        'protected-readonly-property',
        'protected-property',
        'decorated-property',
        'public-readonly-property',
        'public-property',
        'constructor',
        'private-method',
        'decorated-get-method',
        'decorated-method',
        'protected-method',
        'public-method',
        'unknown',
      ],
    },
  ],
};
